setは重複を許さない順序付き集合 重複データは自動的に削除される。
これは｛１，３，４｝だけが格納される。
// 初期化
set<int> st{3,1,4,1};
set<int> st;

set<int> st;
st.insert(8);

領域
empty	コンテナが空であるかどうかを調べる
size	要素数を取得する
max_size	格納可能な最大の要素数を取得する

コンテナの変更
例
st.insert(8);
st.erase(7);

insert	        要素を挿入する
erase	        要素を削除する
clear	        全ての要素を削除する
emplace	        要素を直接構築する	C++11
emplace_hint	ヒントを使って要素を直接構築する	C++11
swap	コンテンツを交換する
extract	ノードハンドルを取得する	C++17
merge	他のオブジェクトの要素をマージする	C++17

要素アクセス
count	    指定したキーにマッチする要素の数を返す
find	    指定したキーで要素を探す
contains	指定したキーの要素が含まれているかを判定する	C++20
equal_range	指定したキーにマッチする要素範囲を返す
lower_bound	与えられた値より小さくない最初の要素へのイテレータを返す
upper_bound	特定の値よりも大きい最初の要素へのイテレータを返す



// 挿入 2 を追加する。
st.insert(2);

// 削除
chars.erase('A');
int i1 = setiPool.erase(2);     // 要素 2 が削除される。削除された要素の数 1 が返る。
int i2 = setiPool.erase(4);     // 要素 4 は無いので、0 が返る。

// 空かどうか
st.empty() // bool

// 要素の数
size() // size_t

// コピー
set<int> org{3,1,4};
set<int> x(org);
上記のコードはorgをコピーするので、
{1,3,4}という値をもつ動的配列xを生成する。

//検索 存在
set<int>::iterator iti = setiPool.find(3);
// find() で要素が見つかれば、要素へのイテレータが得られる。
if (iti == setiPool.end()) {
     //見つからなかった
}

set<int>st{ 3,1,4,1,5,9,2,6,5,3,5 };
//最初の要素へのイテレータを取得
auto itr = st.begin();
//イテレータの指す先のデータを表示
cout << *itr;


// 全ての要素を表示1
set<int>st{ 3,1,4,1,5,9,2,6,5,3,5 };
for (auto itr = st.begin(); itr != st.end(); ++itr) {
    cout << *itr;
}

// 全ての要素を表示2
set<int>st{ 3,1,4,1,5,9,2,6,5,3,5 };
for (auto x : st) {
    cout << x;
}


// デバグ用プリント
void Print(set<int>& rseti) {
    for (set<int>::iterator iti = rseti.begin(); iti != rseti.end(); iti++) { printf("%3d ", *iti); }
    printf("\n");
}

ABC32B
string s;
int    k;
cin >> s >> k;
set<string> setS;
rep(i, s.size() - k + 1) { setS.insert(s.substr(i, k)); }
cout << setS.size() << endl;

ABC9B
int n;
cin >> n;
int                         a[n];
set<int, std::greater<int>> se;
rep(i, n) {
    cin >> a[i];
    se.insert(a[i]);
}
se.erase(*se.begin());
cout << *se.begin() << endl;
