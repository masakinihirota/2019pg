関数名末尾
無印は unsigned int。
l が付いてるのは long
ll なら long long

__builtin_popcount
__builtin_popcountl
__builtin_popcountll
引数の2進表記中に出現する1の個数。
0x11 (2進で10001) なら2
0x57 (2進で1010111) なら5

__builtin_parity
__builtin_parityl
__builtin_parityll
__builtin_parity(i)==__builtin_popcount(i)&1、らしい。
立ってるビット数の偶奇を返す
（popcount % 2 に相当）
0x11 (2進で10001) なら0（偶数）
0x57 (2進で1010111) なら1（奇数）

__builtin_ffs
__builtin_ffsl
__builtin_ffsll
最下位ビットから数えて最初に出現する1の位置(最下位ビットの位置を1とする)。
0に対する答えは0。
0以外の数値に対しては、__builtin_ctz(i)+1==__builtin_ffs(i)が成立する。
2進で表した場合に小さい方から何桁目に初めて1が現れるか。
0x07 (2進で111) なら1
0x08 (2進で1000) なら 4
0の場合は0を返す。

__builtin_clz
__builtin_clzl
__builtin_clzll
最上位ビットから数えてゼロの連続する個数。
つまり2進桁数の大小をひっくり返したような数。
int e;frexp(i, &e);とすると、
e+__builtin_clz(i)==sizeof(unsigned int)*8==32になる。
2進で表した場合に左側にいくつ0を埋める必要があるか
 (the number of leading 0-bits in x)
（32bit unsigned intの場合）0x07(2進で111) なら29。
0の場合は未定義。

__builtin_ctz
__builtin_ctzl
__builtin_ctzll
最下位ビットから数えてゼロの連続する個数。
0に対する答えは未定義だけどうちの環境では-1になった。
0以外のiについて、i&-i==1<
2進で表した場合に、1の位からいくつ0が連なっているか
(the number of trailing 0-bits in x)
0x08 (2進で1000) なら3。
0の場合は未定義。

__builtin_bswap{32,64}
バイトオーダーを反転する

#
 int n, x;  //  商品数 2進数
    cin >> n >> x;
    int ans = 0;
    for (int i = 0; i < n; i++) {
        int a;  //商品の価格
        cin >> a;
        if (x % 2) ans += a; // if(x%2==1)
        x /= 2;              // 2進数で1のときだけ合計する
    }
    cout << ans << endl;

#
if(x>>i & 1)

