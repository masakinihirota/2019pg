#二分探索
ソートされた配列に対して効率良く値を検索するための方法です．
このアルゴリズムの計算量
長さ N の配列に対して O(log N)
ライブラリとして下記がある。
lower_bound
upper_bound

binary_search(vc.begin(), vc.end(), x); //true か false を返す
lower_bound(vc.begin(), vc.end(), x); //x 以上の値が初めて現れる位置のイテレータを返す
upper_bound(vc.begin(), vc.end(), x); //x より大きい値が初めて現れる位置のイテレータを返す
equal_range(vc.begin(), vc.end(), x); //上記２カ所のイテレータのペアを返す

二分探索を行う関数として、`std::lower_bound()`と`std::upper_bound()`が用意されている。
e###配列形式
a を昇順にソートされた配列、n を a の要素数とする。

|            関数             |                       返り値                       |
| :-------------------------: | :------------------------------------------------: |
| `std::lower_bound(a,a+n,k)` | a の中で、k 以上の値が初めて現れる位置へのポインタ |
| `std::upper_bound(a,a+n,k)` |  a の中で、k 超の値が初めて現れる位置へのポインタ  |

###ある列における、ある数の個数
二分探索を用いて、ある列 a に含まれる数 k の個数を求める際には、次のように記述する。

```配列形式.cpp
std::lower_bound(a,a+n,k)-std::upper_bound(a,a+n,k)
```

```STL形式.cpp
std::lower_bound(a.begin(),a.end(),k)-std::upper_bound(a.begin(),a.end(),k)
```


#二分探索ソース例
```

#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;
int main(void) {
	int n;
	cin >> n;
	vector<int> vc;
	while(n--) {
		int x;
		cin >> x;
		vc.push_back(x);
	}
	sort(vc.begin(), vc.end());	// 二分探索なので必ずソートしておく

	int x;
	cin >> x;
	if(binary_search(vc.begin(), vc.end(), x))
    //binary_searchはtrue, falseを返す
	cout << "I found " << x << '\n';

	vector<int>::iterator lit = lower_bound(vc.begin(), vc.end(), x);
    // lower_boundは指定された値"以上"の値が初めて現れた位置のイテレータを返す
	vector<int>::iterator uit = upper_bound(vc.begin(), vc.end(), x);
    // upper_boundは指定された値を"超える"値が初めて現れた位置のイテレータを返す

    if(lit != vc.end() && lit != uit)
		cout << uit - lit << '\n';	// この場合, ult - lit は vc 中の x の個数になる
}
lower_bound()とupper_bound()を組み合わせると配列内で特定の値が存在する範囲を得ることができます。

```
